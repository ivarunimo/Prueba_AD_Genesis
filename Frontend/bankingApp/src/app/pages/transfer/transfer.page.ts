import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { IonicModule } from '@ionic/angular';
import { RouterModule } from '@angular/router';
import { AccountService } from 'src/app/services/account/account.service';
import { Accounts } from 'src/app/models/Accounts';
import { Transfers } from 'src/app/models/Transfers';
import { TransferService } from 'src/app/services/transfers/transfer.service';
import { ToastController } from '@ionic/angular';
import { AlertController } from '@ionic/angular';

@Component({
  selector: 'app-transfer',
  templateUrl: './transfer.page.html',
  styleUrls: ['./transfer.page.scss'],
  standalone: true,
  imports: [IonicModule, CommonModule, FormsModule, RouterModule, ReactiveFormsModule]
})
export class TransferPage implements OnInit {
  public transferForm: FormGroup;
  public availableAccounts: Accounts[] = [];
  public amountOrigin: string = '';
  public amountDestination: string = '';

  constructor(
    private accountService: AccountService,
    private formBuilder: FormBuilder,
    private transferService: TransferService,
    private toastController: ToastController,
    private alertCtrl: AlertController
  ) {
    this.transferForm = this.formBuilder.group({
      sourceAccount: ['', Validators.required],
      destinationAccount: ['', Validators.required],
      amount: ['', [Validators.required, Validators.min(100)]],
      description: ['', Validators.required]
    });

    this.transferForm.valueChanges.subscribe(value => {
      console.log(value);
      if (value.sourceAccount) {
        const sourceAccount = this.availableAccounts.find(account => account.id === value.sourceAccount);
        this.amountOrigin = sourceAccount ? sourceAccount.balance.toString() : '';
      }
      if (value.destinationAccount) {
        const destinationAccount = this.availableAccounts.find(account => account.id === value.destinationAccount);
        this.amountDestination = destinationAccount ? destinationAccount.balance.toString() : '';
      }
    });
  }

  ngOnInit() {
    this.accountService.UserId_Account(Number(sessionStorage.getItem('user_id'))).subscribe(accounts => {
      this.availableAccounts = accounts;
    });
  }

  async confirmation() {
    const alert = await this.alertCtrl.create({
      header: 'Confirmar',
      message: '¿Deseas realizar la transferencia?',
      buttons: [
        {
          text: 'Cancelar',
          role: 'cancel'
        },
        {
          text: 'Sí',
          handler: () => {
            this.onSubmitTransfer(); // Acción al confirmar
          }
        }
      ]
    });

    await alert.present();
  }


  async onSubmitTransfer() {
    if (this.transferForm.valid) {
      if (this.transferForm.value.sourceAccount === this.transferForm.value.destinationAccount) {
        const toast = await this.toastController.create({
          message: 'Error al realizar la transferencia: ' + 'No puedes transferir a la misma cuenta',
          duration: 3000,
          color: 'danger', // success, danger, warning, etc.
          position: 'middle', // 'top', 'middle', 'bottom'
          icon: 'close-circle-outline',
        });
        toast.present();
      } else {
        let transferencia: Transfers = {
          id: 0, // Assuming the ID will be generated by the backend
          origin: this.transferForm.value.sourceAccount,
          destiny: this.transferForm.value.destinationAccount,
          description: this.transferForm.value.description,
          amount: this.transferForm.value.amount
        };
        this.transferService.createTransfer(transferencia).subscribe(
          async response => {
            console.log(response)

            const toast = await this.toastController.create({
              message: 'Transferencia realizada correctamente',
              duration: 3000,
              color: 'success', // success, danger, warning, etc.
              position: 'middle', // 'top', 'middle', 'bottom'
              icon: 'checkmark-circle-outline',
            });
            toast.present();
            this.transferForm.reset();
            this.amountOrigin = '';
            this.amountDestination = '';
          },
          async error => {
            console.log(error);
            const toast = await this.toastController.create({
              message: 'Error al realizar la transferencia: ' + error.error,
              duration: 3000,
              color: 'danger', // success, danger, warning, etc.
              position: 'middle', // 'top', 'middle', 'bottom'
              icon: 'error-outline',
            });
            toast.present();
          }
        );

        // Aquí puedes llamar al servicio para realizar la transferencia
      }
    }
  }

}
